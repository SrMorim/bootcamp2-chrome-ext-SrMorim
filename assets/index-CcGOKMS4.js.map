{"version":3,"file":"index-CcGOKMS4.js","sources":["../../src/timer.js","../../src/api-client.js","../../src/main.js"],"sourcesContent":["// Timer class - adapted from Chrome extension\nexport class Timer {\n  constructor() {\n    this.state = this.loadState();\n    this.settings = this.loadSettings();\n    this.tickInterval = null;\n    this.tickCallback = null;\n    this.completeCallback = null;\n  }\n\n  // Get default settings\n  static getDefaultSettings() {\n    return {\n      focusDuration: 25,\n      shortBreakDuration: 5,\n      longBreakDuration: 15,\n      longBreakInterval: 4,\n      soundEnabled: true,\n      notificationsEnabled: true\n    };\n  }\n\n  // Load state from localStorage\n  loadState() {\n    const saved = localStorage.getItem('pomodoroState');\n    if (saved) {\n      return JSON.parse(saved);\n    }\n\n    return {\n      mode: 'focus',\n      timeRemaining: 25 * 60,\n      isRunning: false,\n      sessionsCompleted: 0\n    };\n  }\n\n  // Save state to localStorage\n  saveState() {\n    localStorage.setItem('pomodoroState', JSON.stringify(this.state));\n  }\n\n  // Load settings from localStorage\n  loadSettings() {\n    const saved = localStorage.getItem('pomodoroSettings');\n    if (saved) {\n      return JSON.parse(saved);\n    }\n    return Timer.getDefaultSettings();\n  }\n\n  // Save settings to localStorage\n  saveSettings() {\n    localStorage.setItem('pomodoroSettings', JSON.stringify(this.settings));\n  }\n\n  // Get current state\n  getState() {\n    return { ...this.state };\n  }\n\n  // Get settings\n  getSettings() {\n    return { ...this.settings };\n  }\n\n  // Update settings\n  updateSettings(newSettings) {\n    this.settings = { ...this.settings, ...newSettings };\n    this.saveSettings();\n\n    // Update time remaining if not running\n    if (!this.state.isRunning) {\n      this.state.timeRemaining = this.getDurationForMode(this.state.mode) * 60;\n      this.saveState();\n    }\n  }\n\n  // Restore default settings\n  restoreDefaults() {\n    this.settings = Timer.getDefaultSettings();\n    this.saveSettings();\n\n    // Reset timer\n    if (!this.state.isRunning) {\n      this.state.timeRemaining = this.getDurationForMode(this.state.mode) * 60;\n      this.saveState();\n    }\n  }\n\n  // Get duration for a specific mode\n  getDurationForMode(mode) {\n    switch (mode) {\n      case 'focus':\n        return this.settings.focusDuration;\n      case 'shortBreak':\n        return this.settings.shortBreakDuration;\n      case 'longBreak':\n        return this.settings.longBreakDuration;\n      default:\n        return this.settings.focusDuration;\n    }\n  }\n\n  // Start timer\n  start() {\n    if (this.state.isRunning) return;\n\n    this.state.isRunning = true;\n    this.saveState();\n\n    // Create interval (1 second)\n    this.tickInterval = setInterval(() => {\n      this.tick();\n    }, 1000);\n  }\n\n  // Pause timer\n  pause() {\n    if (!this.state.isRunning) return;\n\n    this.state.isRunning = false;\n    this.saveState();\n\n    if (this.tickInterval) {\n      clearInterval(this.tickInterval);\n      this.tickInterval = null;\n    }\n  }\n\n  // Reset timer\n  reset() {\n    this.pause();\n    this.state.timeRemaining = this.getDurationForMode(this.state.mode) * 60;\n    this.saveState();\n  }\n\n  // Skip to next mode\n  skip() {\n    this.pause();\n    this.switchToNextMode();\n    this.saveState();\n  }\n\n  // Change mode\n  changeMode(newMode) {\n    this.pause();\n    this.state.mode = newMode;\n    this.state.timeRemaining = this.getDurationForMode(newMode) * 60;\n    this.saveState();\n  }\n\n  // Timer tick (every second)\n  tick() {\n    this.state.timeRemaining--;\n\n    if (this.state.timeRemaining <= 0) {\n      // Timer completed\n      const completedMode = this.state.mode;\n\n      // Increment sessions if focus completed\n      if (completedMode === 'focus') {\n        this.state.sessionsCompleted++;\n      }\n\n      // Switch to next mode\n      this.switchToNextMode();\n\n      // Pause timer\n      this.pause();\n\n      // Save state\n      this.saveState();\n\n      // Call complete callback\n      if (this.completeCallback) {\n        this.completeCallback(completedMode);\n      }\n    } else {\n      // Save state\n      this.saveState();\n\n      // Call tick callback\n      if (this.tickCallback) {\n        this.tickCallback();\n      }\n    }\n  }\n\n  // Switch to next mode\n  switchToNextMode() {\n    if (this.state.mode === 'focus') {\n      // Check if it's time for long break\n      if (this.state.sessionsCompleted % this.settings.longBreakInterval === 0) {\n        this.state.mode = 'longBreak';\n      } else {\n        this.state.mode = 'shortBreak';\n      }\n    } else {\n      // After any break, return to focus\n      this.state.mode = 'focus';\n    }\n\n    this.state.timeRemaining = this.getDurationForMode(this.state.mode) * 60;\n  }\n\n  // Register tick callback\n  onTick(callback) {\n    this.tickCallback = callback;\n  }\n\n  // Register complete callback\n  onComplete(callback) {\n    this.completeCallback = callback;\n  }\n}\n","// API Client for backend communication\nexport class ApiClient {\n  constructor() {\n    // Use environment variable or fallback to localhost\n    this.baseURL = import.meta.env.VITE_API_URL || 'http://localhost:3000';\n  }\n\n  // Get motivational quote (from Quotable API via backend proxy)\n  async getQuote() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/quote`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch quote');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching quote:', error);\n      // Return fallback quote\n      return {\n        content: 'A persistência é o caminho do êxito.',\n        author: 'Charles Chaplin'\n      };\n    }\n  }\n\n  // Get all sessions\n  async getSessions() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/sessions`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch sessions');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching sessions:', error);\n      // Return local storage as fallback\n      return this.getLocalSessions();\n    }\n  }\n\n  // Save a new session\n  async saveSession(session) {\n    try {\n      const response = await fetch(`${this.baseURL}/api/sessions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(session)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save session');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error saving session:', error);\n      // Save to local storage as fallback\n      this.saveLocalSession(session);\n      return session;\n    }\n  }\n\n  // Clear all sessions\n  async clearSessions() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/sessions`, {\n        method: 'DELETE'\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to clear sessions');\n      }\n\n      // Also clear local storage\n      localStorage.removeItem('pomodoroSessions');\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error clearing sessions:', error);\n      // Clear local storage as fallback\n      localStorage.removeItem('pomodoroSessions');\n    }\n  }\n\n  // Get statistics\n  async getStats() {\n    try {\n      const response = await fetch(`${this.baseURL}/api/sessions/stats`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch stats');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      // Calculate from local sessions\n      const sessions = this.getLocalSessions();\n      return this.calculateStats(sessions);\n    }\n  }\n\n  // Fallback: Get sessions from localStorage\n  getLocalSessions() {\n    const saved = localStorage.getItem('pomodoroSessions');\n    return saved ? JSON.parse(saved) : [];\n  }\n\n  // Fallback: Save session to localStorage\n  saveLocalSession(session) {\n    const sessions = this.getLocalSessions();\n    sessions.unshift({\n      ...session,\n      id: Date.now().toString()\n    });\n\n    // Keep only last 100 sessions\n    if (sessions.length > 100) {\n      sessions.splice(100);\n    }\n\n    localStorage.setItem('pomodoroSessions', JSON.stringify(sessions));\n  }\n\n  // Calculate statistics from sessions\n  calculateStats(sessions) {\n    const total = sessions.length;\n    const totalMinutes = sessions.reduce((sum, s) => sum + s.duration, 0);\n\n    const today = sessions.filter(s => {\n      const date = new Date(s.completedAt);\n      const now = new Date();\n      return date.toDateString() === now.toDateString();\n    }).length;\n\n    const thisWeek = sessions.filter(s => {\n      const date = new Date(s.completedAt);\n      const now = new Date();\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      return date >= weekAgo;\n    }).length;\n\n    return {\n      total,\n      totalMinutes,\n      today,\n      thisWeek\n    };\n  }\n}\n","import './styles.css';\nimport { Timer } from './timer.js';\nimport { ApiClient } from './api-client.js';\n\n// Initialize\nconst timer = new Timer();\nconst apiClient = new ApiClient();\n\n// DOM Elements\nconst timerDisplay = document.getElementById('timerDisplay');\nconst modeDisplay = document.getElementById('modeDisplay');\nconst sessionCount = document.getElementById('sessionCount');\nconst startBtn = document.getElementById('startBtn');\nconst pauseBtn = document.getElementById('pauseBtn');\nconst resetBtn = document.getElementById('resetBtn');\nconst skipBtn = document.getElementById('skipBtn');\nconst tabBtns = document.querySelectorAll('.tab-btn');\nconst timerSection = document.querySelector('.timer-section');\nconst quoteSection = document.getElementById('quoteSection');\nconst quoteText = document.getElementById('quoteText');\nconst quoteAuthor = document.getElementById('quoteAuthor');\nconst onlineStatus = document.getElementById('onlineStatus');\n\n// Navigation\nconst navBtns = document.querySelectorAll('.nav-btn');\nconst historyTab = document.getElementById('historyTab');\nconst settingsTab = document.getElementById('settingsTab');\nconst mainContent = document.querySelector('main');\n\n// History elements\nconst sessionsList = document.getElementById('sessionsList');\nconst totalSessions = document.getElementById('totalSessions');\nconst totalTime = document.getElementById('totalTime');\nconst todaySessions = document.getElementById('todaySessions');\nconst clearHistoryBtn = document.getElementById('clearHistoryBtn');\n\n// Settings form\nconst focusDurationInput = document.getElementById('focusDuration');\nconst shortBreakDurationInput = document.getElementById('shortBreakDuration');\nconst longBreakDurationInput = document.getElementById('longBreakDuration');\nconst longBreakIntervalInput = document.getElementById('longBreakInterval');\nconst soundEnabledInput = document.getElementById('soundEnabled');\nconst notificationsEnabledInput = document.getElementById('notificationsEnabled');\nconst restoreDefaultsBtn = document.getElementById('restoreDefaultsBtn');\n\n// Mode names\nconst modeNames = {\n  focus: 'Foco',\n  shortBreak: 'Pausa Curta',\n  longBreak: 'Pausa Longa'\n};\n\n// Update UI with timer state\nfunction updateUI() {\n  const state = timer.getState();\n\n  // Update timer display\n  const minutes = Math.floor(state.timeRemaining / 60);\n  const seconds = state.timeRemaining % 60;\n  timerDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n\n  // Update mode\n  modeDisplay.textContent = modeNames[state.mode];\n\n  // Update session count\n  sessionCount.textContent = state.sessionsCompleted;\n\n  // Update buttons\n  if (state.isRunning) {\n    startBtn.disabled = true;\n    pauseBtn.disabled = false;\n    timerSection.classList.add('running');\n  } else {\n    startBtn.disabled = false;\n    pauseBtn.disabled = true;\n    timerSection.classList.remove('running');\n  }\n\n  // Update active tab\n  tabBtns.forEach(btn => {\n    if (btn.dataset.mode === state.mode) {\n      btn.classList.add('active');\n    } else {\n      btn.classList.remove('active');\n    }\n  });\n\n  // Show quote during breaks\n  if (state.mode === 'shortBreak' || state.mode === 'longBreak') {\n    if (quoteSection.style.display === 'none') {\n      loadQuote();\n    }\n    quoteSection.style.display = 'block';\n  } else {\n    quoteSection.style.display = 'none';\n  }\n}\n\n// Load motivational quote\nasync function loadQuote() {\n  try {\n    quoteText.innerHTML = '<span class=\"loading\"></span> Carregando frase...';\n    quoteAuthor.textContent = '';\n\n    const quote = await apiClient.getQuote();\n    quoteText.textContent = `\"${quote.content}\"`;\n    quoteAuthor.textContent = `— ${quote.author}`;\n  } catch (error) {\n    console.error('Failed to load quote:', error);\n    quoteText.textContent = 'Aproveite sua pausa! ☕';\n    quoteAuthor.textContent = '';\n  }\n}\n\n// Event Listeners\nstartBtn.addEventListener('click', () => {\n  timer.start();\n  updateUI();\n});\n\npauseBtn.addEventListener('click', () => {\n  timer.pause();\n  updateUI();\n});\n\nresetBtn.addEventListener('click', () => {\n  if (confirm('Resetar o timer atual?')) {\n    timer.reset();\n    updateUI();\n  }\n});\n\nskipBtn.addEventListener('click', () => {\n  if (confirm('Pular para a próxima sessão?')) {\n    timer.skip();\n    updateUI();\n  }\n});\n\n// Mode tabs\ntabBtns.forEach(btn => {\n  btn.addEventListener('click', () => {\n    const mode = btn.dataset.mode;\n    timer.changeMode(mode);\n    updateUI();\n  });\n});\n\n// Timer tick callback\ntimer.onTick(() => {\n  updateUI();\n});\n\n// Timer complete callback\ntimer.onComplete(async (completedMode) => {\n  updateUI();\n\n  // Save session to backend\n  try {\n    await apiClient.saveSession({\n      mode: completedMode,\n      duration: timer.getDurationForMode(completedMode),\n      completedAt: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Failed to save session:', error);\n  }\n\n  // Show notification\n  if (Notification.permission === 'granted') {\n    const modeName = modeNames[completedMode];\n    new Notification('Pomodoro Completo!', {\n      body: `Sessão de ${modeName} finalizada. Parabéns!`,\n      icon: '/icons/icon-192.png',\n      badge: '/icons/icon-192.png'\n    });\n  }\n\n  // Play sound\n  const settings = timer.getSettings();\n  if (settings.soundEnabled) {\n    playSound();\n  }\n});\n\n// Play completion sound\nfunction playSound() {\n  const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSd+zPLTgjMGHm/A7+OZSA0PXLLT7K1aFQlGpOLyvWseBSJ4yfXYkTsIGnXG6t+XTAoRYLXr7K5aEwhBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XTQsQX7Xr7K1ZFAlBmuHyvm0fBiF2x/TalD0IGW7B7d+XT');\n  audio.play().catch(e => console.log('Could not play sound:', e));\n}\n\n// Navigation between tabs\nnavBtns.forEach(btn => {\n  btn.addEventListener('click', () => {\n    const tab = btn.dataset.tab;\n\n    // Update active nav button\n    navBtns.forEach(b => b.classList.remove('active'));\n    btn.classList.add('active');\n\n    // Show correct content\n    if (tab === 'timer') {\n      mainContent.style.display = 'block';\n      historyTab.style.display = 'none';\n      settingsTab.style.display = 'none';\n    } else if (tab === 'history') {\n      mainContent.style.display = 'none';\n      historyTab.style.display = 'block';\n      settingsTab.style.display = 'none';\n      loadHistory();\n    } else if (tab === 'settings') {\n      mainContent.style.display = 'none';\n      historyTab.style.display = 'none';\n      settingsTab.style.display = 'block';\n      loadSettings();\n    }\n  });\n});\n\n// Load and display history\nasync function loadHistory() {\n  try {\n    const sessions = await apiClient.getSessions();\n\n    if (sessions.length === 0) {\n      sessionsList.innerHTML = '<p class=\"empty-state\">Nenhuma sessão registrada ainda.</p>';\n      totalSessions.textContent = '0';\n      totalTime.textContent = '0h';\n      todaySessions.textContent = '0';\n      return;\n    }\n\n    // Calculate stats\n    const total = sessions.length;\n    const totalMinutes = sessions.reduce((sum, s) => sum + s.duration, 0);\n    const totalHours = Math.floor(totalMinutes / 60);\n    const today = sessions.filter(s => {\n      const date = new Date(s.completedAt);\n      const now = new Date();\n      return date.toDateString() === now.toDateString();\n    }).length;\n\n    totalSessions.textContent = total;\n    totalTime.textContent = totalHours > 0 ? `${totalHours}h` : `${totalMinutes}min`;\n    todaySessions.textContent = today;\n\n    // Render session items\n    sessionsList.innerHTML = sessions.slice(0, 20).map(session => {\n      const date = new Date(session.completedAt);\n      const timeStr = date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n      const dateStr = date.toLocaleDateString('pt-BR');\n\n      return `\n        <div class=\"session-item\">\n          <div class=\"session-info\">\n            <div class=\"session-mode\">${modeNames[session.mode]}</div>\n            <div class=\"session-time\">${dateStr} às ${timeStr}</div>\n          </div>\n          <div class=\"session-duration\">${session.duration}min</div>\n        </div>\n      `;\n    }).join('');\n  } catch (error) {\n    console.error('Failed to load history:', error);\n    sessionsList.innerHTML = '<p class=\"empty-state\">Erro ao carregar histórico.</p>';\n  }\n}\n\n// Clear history\nclearHistoryBtn.addEventListener('click', async () => {\n  if (confirm('Tem certeza que deseja limpar todo o histórico?')) {\n    try {\n      await apiClient.clearSessions();\n      loadHistory();\n    } catch (error) {\n      console.error('Failed to clear history:', error);\n      alert('Erro ao limpar histórico.');\n    }\n  }\n});\n\n// Load settings\nfunction loadSettings() {\n  const settings = timer.getSettings();\n  focusDurationInput.value = settings.focusDuration;\n  shortBreakDurationInput.value = settings.shortBreakDuration;\n  longBreakDurationInput.value = settings.longBreakDuration;\n  longBreakIntervalInput.value = settings.longBreakInterval;\n  soundEnabledInput.checked = settings.soundEnabled;\n  notificationsEnabledInput.checked = settings.notificationsEnabled;\n}\n\n// Save settings\ndocument.querySelector('.settings-form').addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const newSettings = {\n    focusDuration: parseInt(focusDurationInput.value),\n    shortBreakDuration: parseInt(shortBreakDurationInput.value),\n    longBreakDuration: parseInt(longBreakDurationInput.value),\n    longBreakInterval: parseInt(longBreakIntervalInput.value),\n    soundEnabled: soundEnabledInput.checked,\n    notificationsEnabled: notificationsEnabledInput.checked\n  };\n\n  timer.updateSettings(newSettings);\n  alert('Configurações salvas!');\n});\n\n// Restore defaults\nrestoreDefaultsBtn.addEventListener('click', () => {\n  if (confirm('Restaurar configurações padrão?')) {\n    timer.restoreDefaults();\n    loadSettings();\n  }\n});\n\n// Request notification permission\nif (Notification.permission === 'default') {\n  Notification.requestPermission();\n}\n\n// Online/offline status\nfunction updateOnlineStatus() {\n  if (navigator.onLine) {\n    onlineStatus.textContent = '● Online';\n    onlineStatus.className = 'status-badge online';\n  } else {\n    onlineStatus.textContent = '● Offline';\n    onlineStatus.className = 'status-badge offline';\n  }\n}\n\nwindow.addEventListener('online', updateOnlineStatus);\nwindow.addEventListener('offline', updateOnlineStatus);\nupdateOnlineStatus();\n\n// Initial UI update\nupdateUI();\n\n// Register service worker\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/sw.js').then(() => {\n    console.log('Service Worker registered');\n  }).catch(err => {\n    console.error('Service Worker registration failed:', err);\n  });\n}\n\nconsole.log('🍅 Bootcamp Pomodoro PWA v2.0.0 loaded');\n"],"names":["Timer","saved","newSettings","mode","newMode","completedMode","callback","ApiClient","response","error","session","sessions","total","totalMinutes","sum","s","today","date","now","thisWeek","weekAgo","timer","apiClient","timerDisplay","modeDisplay","sessionCount","startBtn","pauseBtn","resetBtn","skipBtn","tabBtns","timerSection","quoteSection","quoteText","quoteAuthor","onlineStatus","navBtns","historyTab","settingsTab","mainContent","sessionsList","totalSessions","totalTime","todaySessions","clearHistoryBtn","focusDurationInput","shortBreakDurationInput","longBreakDurationInput","longBreakIntervalInput","soundEnabledInput","notificationsEnabledInput","restoreDefaultsBtn","modeNames","updateUI","state","minutes","seconds","btn","loadQuote","quote","modeName","playSound","e","tab","b","loadHistory","loadSettings","totalHours","timeStr","dateStr","settings","updateOnlineStatus","err"],"mappings":"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"}